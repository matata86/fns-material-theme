fns:

    # tmavší zluta '#FFC107' # Amber
    
    theme-red: '#db4437'
    theme-green: '#4CAF50'
    theme-blue: '#2196F3'
    theme-orange: '#FF9800'
    theme-yellow: '#FDD835'
    theme-gray: '#9e9e9e'
    theme-gray-light: '#ececec'
    
    ###CLIMATE
    climate-blue: '3,169,244'
    climate-red: '219,68,55'
    climate-black: '0,0,0'
    climate-orange: '255,152,0'
    climate-yellow: '253,216,53'
    climate-gray: '158,158,158'
    climate-green: '76, 175, 80'
    
    ####DEFAULT HA COLOR
    success-color: "var(--theme-green)"
    warning-color: "var(--theme-orange)"
    danger-color: "var(--theme-red)"
    primary-color: "var(--theme-blue)"
    
    
    
    
    state-default-color: "var(--theme-gray)"
    state-alarm_control_panel-disarmed-color: "var(--theme-green)"
    state-alarm_control_panel-armed_away-color: "var(--theme-red)"
    state-alarm_control_panel-arming-color: "var(--theme-orange)"
    state-alarm_control_panel-pending-color: "var(--theme-orange)"
    state-alarm_control_panel-triggered-color: "var(--theme-red)"
    state-alert-color: "var(--theme-red)"
    state-automation-color: "var(--theme-yellow)"
    state-binary-sensor-color: "var(--theme-yellow)"
    state-binary-sensor-alerting-color: "var(--theme-red)"
    state-calendar-color: "var(--theme-blue)"
    state-camera-color: "var(--theme-blue)"
    state-climate-auto-color: "var(--theme-green)"
    state-climate-cool-color: "var(--theme-blue)"
    state-climate-dry-color: "var(--theme-orange)"
    state-climate-fan-only-color: '#00BCD4' # Cyan
    state-climate-heat-color: "var(--theme-orange)"
    state-climate-heat-cool-color: "var(--theme-yellow)"
    state-climate-idle-color: '#BDBDBD' # Disabled (Light Grey)
    state-cover-color: '#9C27B0' # Purple
    state-fan-color: '#00BCD4' # Cyan
    state-group-color: "var(--theme-yellow)"
    state-humidifier-color: "var(--theme-blue)"
    state-input-boolean-color: "var(--theme-yellow)"
    state-light-color: "var(--theme-yellow)"
    state-lock-jammed-color: "var(--theme-red)"
    state-lock-locked-color: "var(--theme-green)"
    state-lock-pending-color: '#FF9800' # Orange
    state-media_player-active-color: "var(--theme-yellow)"
    state-media_player-on-color: "var(--theme-yellow)"
    state-media_player-idle-color: "#44739e"
    state-person-home-color: "var(--theme-green)"
    state-person-zone-color: "var(--theme-blue)"
    state-remote-color: "var(--theme-blue)"
    state-script-color: "var(--theme-yellow)"
    state-sensor-battery-high-color: "var(--theme-green)"
    state-sensor-battery-low-color: "var(--theme-red)"
    state-sensor-battery-medium-color: "var(--theme-orange)"
    state-sensor-battery-unknown-color: '#BDBDBD' # Disabled (Light Grey)
    state-siren-color: "var(--theme-red)"
    state-sun-day-color: "var(--theme-yellow)"
    state-sun-night-color: '#673AB7' # Deep Purple
    state-switch-color: "var(--theme-yellow)"
    state-timer-color: "var(--theme-yellow)"
    state-update-color: "var(--theme-green)"
    state-update-installing-color: "var(--theme-orange)"
    state-vacuum-active-color: "var(--theme-yellow)"
    
    
    
    
    round-slider-path-color: "var(--theme-yellow)"
    
    ha-card-border-width: 0px;
    ha-card-border-radius: 9px ## or whatever radius you want
    ha-card-border-color: rgba(0,0,0,0) ## 
    box-shadow: "0 .125rem .25rem rgba(0,0,0,.075)"

    ha-card-box-shadow: "var(--box-shadow)"
    
    card-mod-theme: "fns"
    
    card-mod-card-yaml: |
        
        round-slider$: |
            .handle {
              stroke-width: 14;
              stroke: white !important;
                }
                
            {% if config is defined and config.entity is defined and state_attr(config.entity, 'hvac_action') is not none %}
            .overflow {
                stroke: rgb(var(--climate-orange)) !important;
                stroke-width: 18;
                }
            {% endif %}
            
            {% if config is defined and config.entity is defined and state_attr(config.entity, 'action') is not none %}
            .overflow {
                stroke: rgb(var(--climate-blue)) !important;
                stroke-width: 18;
                }
            {% endif %}
            
            
            .slider path.path {
                stroke: var(--climate-gray-light);
                }
            
        .: | 
            
            ha-card.type-thermostat {
                --round-slider-path-width: 18px;
                --mode-color: rgba(var(--climate-orange), .5) !important
            }
            
             ha-card.type-humidifier {
                --round-slider-path-width: 18px;
                --mode-color: rgba(var(--climate-blue), .5) !important
            }
            
            ha-card.type-thermostat text[dx="1"]{
                font-size: 12px !important;
            }
            
            ha-card.type-thermostat text tspan {
                font-size: 3px !important;
            }
            
            ha-card.alert-warning {
                background: var(--warning-color);
                color: white !important;
                --card-mod-icon-color: white !important;
                width: 100% !important;
            } 
            
            ha-card.alert-warning .name{
                color: white !important;
            } 
            
            ha-card.alert-danger {
                background: var(--error-color);
                color: white !important;
                --card-mod-icon-color: white !important;
            } 
            
            ha-card.alert-danger .name, ha-card.alert-danger .measurement{
                color: white !important;
            } 
            
            ha-card.success {
                background: var(--success-color);
                color: white !important;
                --card-mod-icon-color: white !important;
            } 
            
            ha-card.success .name{
                color: white !important;
            }
            
            ha-card.type-custom-xiaomi-vacuum-map-card .tile-wrapper {
              border-radius: 0 !important;
              background-color: rgba(var(--climate-gray), .2) !important;
            }
            
            {% if is_state('vacuum.bobik','cleaning') %}
            ha-card.type-custom-xiaomi-vacuum-map-card .tile-wrapper:first-of-type {
              background: linear-gradient(to right, rgba(var(--climate-gray), .2) 0%, rgba(var(--climate-gray), .2) {{ states('sensor.roborock_s8_cleaning_progress') }}%, rgba(var(--climate-gray), .0) {{ states('sensor.roborock_s8_cleaning_progress') }}%, rgba(var(--climate-gray), .0) 100%);
              position:relative;
            }
            
            ha-card.type-custom-xiaomi-vacuum-map-card .tile-wrapper:first-of-type .tile-title::after {
              position:absolute;
              top: 11px;
              right:11px;
              content: "{{states('sensor.roborock_s8_cleaning_progress')}}%";
            }
            {% endif %}
            
            ha-card.type-custom-xiaomi-vacuum-map-card .tile-wrapper:nth-of-type(2) {
              background: linear-gradient(to right, rgba(var(--climate-gray), .2) 0%, rgba(var(--climate-gray), .2) {{ states('sensor.dustbin_vacuum') }}%, rgba(var(--climate-gray), .0) {{ states('sensor.dustbin_vacuum') }}%, rgba(var(--climate-gray), .0) 100%);
              position:relative;
            }
            
                        
            {% if config is defined and config.entity is defined and state_attr(config.entity, 'hvac_action') is not none %}
                {% if state_attr(config.entity, 'hvac_action') == 'heating' %}
                    round-slider {
                        background: radial-gradient(circle, rgba(var(--climate-orange), .2) 0%, rgba(255,255,255,0) 65%) !important;
                    }
                {% endif %}
            {% endif %}
            
            {% if config is defined and config.entity is defined and state_attr(config.entity, 'action') is not none %}
                {% if state_attr(config.entity, 'action') == 'drying' %}
                    round-slider {
                        background: radial-gradient(circle, rgba(var(--climate-blue), .2) 0%, rgba(255,255,255,0) 65%) !important;
                    }
                {% endif %}
            {% endif %}
            
            {% if config is defined and config.entity is defined and is_state(config.entity, 'off') %}
                ha-card.type-tile hui-tile-features {
                    display: none;
                }
            {% endif %}

            


            
    card-mod-badge-yaml: |
        .: |
          :host {
            display: inline-block;
            padding: 5px 5px;
            --label-badge-blue: 
            
              {% set reverse_classes = ['problem', 'window', 'door', 'opening', 'motion'] %}
            
            
              {% if not states(config.entity) %} var(--theme-blue);
              {% elif is_state(config.entity, 'on') and state_attr(config.entity, 'device_class') in reverse_classes %} var(--theme-red);
              {% elif is_state(config.entity, 'off')  and state_attr(config.entity, 'device_class') in reverse_classes %} var(--theme-green);
              {% elif is_state(config.entity, 'on' ) %} var(--theme-green);
              {% elif is_state(config.entity, 'open') %} var(--theme-green);
              {% elif is_state(config.entity, 'unlocked') %} var(--theme-green);
              {% elif is_state(config.entity, 'off') %} var(--theme-red);
              {% elif is_state(config.entity, 'closed') %} var(--theme-red);
              {% elif is_state(config.entity, 'locked') %} var(--theme-red);
              {% else %} var(--theme-blue); {% endif %}
            --label-badge-red: {% if not states(config.entity) %} var(--theme-blue);
              {% elif is_state(config.entity, 'on') %} var(--theme-green);
              {% elif is_state(config.entity, 'off') %} var(--theme-red);
              {% else %} var(--theme-blue); {% endif %}
          }
          
        ha-state-label-badge $ ha-label-badge $: |
          .label-badge {
            border: 2px solid var(--ha-label-badge-color,var(--primary-color)) !important;
            border-radius: 9px !important;
          }
          
          .label-badge .label span {
            border-radius: 9px !important;
          }
    
    
    
    modes:
        light:
            climate-gray-light: '#ececec'
        dark:
            climate-gray-light: '#292929'
            
            
